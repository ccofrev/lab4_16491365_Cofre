/*
 * 
 *   * 
 */
package Vistas;

import java.util.Arrays;
import javax.swing.JOptionPane;
import Modelos.Archivo;
import Modelos.Git;
import Modelos.Repositorio;
import Modelos.Usuario;

/**
 *
 * @author Carlos Cofr√© [carlos.cofre@usach.cl]
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        btnAdd = new javax.swing.JButton();
        btnCommit = new javax.swing.JButton();
        btnPush = new javax.swing.JButton();
        btnPull = new javax.swing.JButton();
        btnLog = new javax.swing.JButton();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        jLayeredPane5 = new javax.swing.JLayeredPane();
        btnEliminar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        labelInfo = new javax.swing.JLabel();
        jLayeredPane6 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        labelWorkspace = new javax.swing.JLabel();
        statusWorkspace = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        labelIndex = new javax.swing.JLabel();
        statusIndex = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        labelLocalRepo = new javax.swing.JLabel();
        statusLocalRepo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        labelRemoteRepo = new javax.swing.JLabel();
        statusRemoteRepo = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLayeredPane7 = new javax.swing.JLayeredPane();
        jPanel3 = new javax.swing.JPanel();
        labelSeleccion = new javax.swing.JLabel();
        labelTitleStatus = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        editPanel = new javax.swing.JLayeredPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaPrincipal = new javax.swing.JTextArea();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        labelSubtitulo = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuNuevoUsuario = new javax.swing.JMenuItem();
        menuNuevoRepo = new javax.swing.JMenuItem();
        menuNuevoArchivo = new javax.swing.JMenuItem();

        jScrollPane2.setViewportView(jEditorPane2);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Laboratorio 4 Paradigmas - Simulador GIT");

        btnAdd.setText("Add");
        btnAdd.setEnabled(false);
        btnAdd.setName(""); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnCommit.setText("Commit");
        btnCommit.setEnabled(false);
        btnCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommitActionPerformed(evt);
            }
        });

        btnPush.setText("Push");
        btnPush.setEnabled(false);
        btnPush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPushActionPerformed(evt);
            }
        });

        btnPull.setText("Pull");
        btnPull.setEnabled(false);
        btnPull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPullActionPerformed(evt);
            }
        });

        btnLog.setText("Log");
        btnLog.setEnabled(false);
        btnLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(btnAdd, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnCommit, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnPush, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnPull, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnLog, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnCommit, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
            .addComponent(btnPush, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
            .addComponent(btnPull, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
            .addComponent(btnLog, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCommit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPush)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPull)
                .addGap(18, 18, 18)
                .addComponent(btnLog)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane4.setBackground(new java.awt.Color(0, 204, 51));

        btnEliminar.setForeground(new java.awt.Color(153, 0, 0));
        btnEliminar.setText("Eliminar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.setEnabled(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.setEnabled(false);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jLayeredPane5.setLayer(btnEliminar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(btnGuardar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane5.setLayer(btnLimpiar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane5Layout = new javax.swing.GroupLayout(jLayeredPane5);
        jLayeredPane5.setLayout(jLayeredPane5Layout);
        jLayeredPane5Layout.setHorizontalGroup(
            jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLimpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardar)
                .addGap(22, 22, 22))
        );
        jLayeredPane5Layout.setVerticalGroup(
            jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnGuardar)
                    .addComponent(btnLimpiar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane6.setToolTipText("texto");

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        labelWorkspace.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWorkspace.setIcon(new javax.swing.ImageIcon(getClass().getResource("../img/workspace.png"))); // NOI18N
        labelWorkspace.setText("  ");
        labelWorkspace.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        statusWorkspace.setText("Status");
        statusWorkspace.setEnabled(false);
        statusWorkspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusWorkspaceActionPerformed(evt);
            }
        });

        jLabel1.setText("Workspace");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelWorkspace, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(statusWorkspace, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(19, 19, 19)
                .addComponent(statusWorkspace)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelWorkspace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        labelIndex.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelIndex.setIcon(new javax.swing.ImageIcon(getClass().getResource("../img/index.png"))); // NOI18N
        labelIndex.setText(" ");
        labelIndex.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        statusIndex.setText("Status");
        statusIndex.setEnabled(false);
        statusIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusIndexActionPerformed(evt);
            }
        });

        jLabel2.setText("Index");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelIndex, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(statusIndex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(statusIndex)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelIndex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));

        labelLocalRepo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelLocalRepo.setIcon(new javax.swing.ImageIcon(getClass().getResource("../img/localrepo.png"))); // NOI18N
        labelLocalRepo.setText(" ");
        labelLocalRepo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        statusLocalRepo.setText("Status");
        statusLocalRepo.setEnabled(false);
        statusLocalRepo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusLocalRepoActionPerformed(evt);
            }
        });

        jLabel3.setText("Local Repository");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelLocalRepo, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(statusLocalRepo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(19, 19, 19)
                .addComponent(statusLocalRepo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelLocalRepo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));

        labelRemoteRepo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRemoteRepo.setIcon(new javax.swing.ImageIcon(getClass().getResource("../img/remoterepo.png"))); // NOI18N
        labelRemoteRepo.setText(" ");
        labelRemoteRepo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        statusRemoteRepo.setText("Status");
        statusRemoteRepo.setEnabled(false);
        statusRemoteRepo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusRemoteRepoActionPerformed(evt);
            }
        });

        jLabel4.setText("Remote Repository");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelRemoteRepo, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(statusRemoteRepo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(statusRemoteRepo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelRemoteRepo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLayeredPane6.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane6.setLayer(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane6.setLayer(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane6.setLayer(jPanel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane6Layout = new javax.swing.GroupLayout(jLayeredPane6);
        jLayeredPane6.setLayout(jLayeredPane6Layout);
        jLayeredPane6Layout.setHorizontalGroup(
            jLayeredPane6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane6Layout.setVerticalGroup(
            jLayeredPane6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane6Layout.createSequentialGroup()
                .addGroup(jLayeredPane6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelSeleccion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSeleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("../img/generico.png"))); // NOI18N
        labelSeleccion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        labelTitleStatus.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelTitleStatus.setText("GIT");

        labelStatus.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labelTitleStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labelSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitleStatus)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labelSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                        .addGap(40, 40, 40))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(61, Short.MAX_VALUE))))
        );

        jLayeredPane7.setLayer(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane7Layout = new javax.swing.GroupLayout(jLayeredPane7);
        jLayeredPane7.setLayout(jLayeredPane7Layout);
        jLayeredPane7Layout.setHorizontalGroup(
            jLayeredPane7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
            .addGroup(jLayeredPane7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane7Layout.createSequentialGroup()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jLayeredPane7Layout.setVerticalGroup(
            jLayeredPane7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
            .addGroup(jLayeredPane7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane7Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        editPanel.setToolTipText("");

        textAreaPrincipal.setEditable(false);
        textAreaPrincipal.setColumns(20);
        textAreaPrincipal.setRows(5);
        textAreaPrincipal.setText("Simulador GIT\n\nEste programa representa el funcionamiento de un \nsistema controlador de versiones basado en GIT.\n\nTal como se har√≠a en una plataforma como GitHub, \nantes de iniciar con un proyecto, deber√≠a existir un registro\nde usuario.\nPara acceder al registro de usuario basta con acceder a \ntrav√©s del menu \"Archivo\" y seleccionar \"Nuevo Usuario\".\nNinguna otra opcion en el programa estara disponible si\nprimero no se registra un usuario con nombre y correo \nelectronico. Para esta simulacion, se considera la \ncreacion de un unico usuario.\nUna vez que se registra un usuario, se puede registrar un\nnuevo repositorio general (un nuevo proyecto). Esto se \nconsigue a trav√©s del menu \"Archivo/Nuevo Repositorio\".\nEsta accion es equivalente a usar el comando git init.\nPara esta simulacion se considera la creacion de un \nunico repositorio.\nSe solicitara para esto ingresar un nombre para el\nrepositorio.\nUna vez que se crea el repositorio, se habilita la creacion\nde archivos, en el mismo menu \"Archivo/Nuevo archivo\".\nSe pueden crear multiples archivos, los cuales se cargan\nen la zona de trabajo \"workspace\".\nLa edicion se realiza en la zona en que esta leyendo. Este\nespacio funcionara tanto para edicion de archivos como \npara la entrega de informacion.\nEl menu de nuevo archivo, tambien sirve para editar archivos\npreviamente creados en el workspace. Basta con escribir el \nnombre de un archivo de un archivo existente. De esta misma \nforma tambien se puede eliminar archivos con el boton \n[Eliminar].\nAgregando por lo menos un archivo en el workspace, se\nhabilitaran los comandos GIT. \n\n\nGit Add\nEste comando se usa para registrar archivos en el index y\nmarcarlos para poder traspasarlos desde el workspace al\nrepositorio local.\nCuando se trate de archivos nuevos, es decir, que estan en el\nworkspace pero que no se habian pasado al local repository, \nse dejan en el index con la marca \"STAGED\". Si se trata de un \narchivo que ya existia en el local repository y se ha modificado,\nse marcara como \"MODIFIED\".\nEl uso es presionando el bot√≥n [Add] y luego escribiendo los \nnombres de los archivos que se desean agregar, en el popup.\nEn caso de ser mas de uno, se pueden escribir con un espacio\nde separacion. Si se desea cargar todos los archivos, basta \ncon dejar el cuadro de texto vacio.\n\nGit Commit\nEste comando se usa para dejar un registro de cambio en \nel local repository. Los archivos marcados en el index para ser\ntraspasados, se agregan al local repository, esto ademas de \ncrearse un objeto \"commit\" el cual registra el cambio con el\nmomento en que se realizo, el usuario que hizo el cambio, \ny los archivos involucrados, ademas de un comentario escrito\npor el usuario al momento de ejecutar. Los commit se registran\nen una estructura contenedora especial, en el local repository.\nUna vez que se realiza el commit, los archivos se mantienen \nregistrados en el index, pero se cambia su estado a \n\"COMMITED\".\nEl uso es presionando el boton [Commit] y luego ingresando \nun comentario a traves de un popup.\n\nGit Push\nEste comando traspasa los cambios desde un repositorio local\na un repositorio remoto, es decir, se copian tanto archivos,\ncomo commits.\nLa forma de uso es solo presionando el boton [Push]\n\nGit Pull\nEste comando traspasa los archivos actuales en un repositorio\nremoto, al workspace. En este caso representa a lo que en git \nser√≠a un pull fozado, puesto que reemplaza completamente los \narchivos que existen en el workspace con los que estan en el \nremote repository.\nEl uso es solo presionando el boton [Pull].\n\nGit Log\nFunci√≥n que muestra los √∫ltimos (5) commits sobre el \nrepositorio, mostrando la informacion asociada a cada commit. \nEl uso es solo presionando el boton [Log]\n\n\nInformacion de repositorios\nEn el esquema superior, se muestra el estado actual de los \nrepositorios, en cuanto a la cantidad de archivos contenidos y\ncommit en el caso de los repositorios. En el caso del index\nse muestra el total de archivos y su descomposicion por estado\nSTAGED, MODIFIED o COMMITED.\nAl presionar el boton [Status] en cada repositorio, se da mayor\ndetalle de los mismos, mostrando un resumen de contenido de \nlos archivos y commit.\n");
        jScrollPane3.setViewportView(textAreaPrincipal);

        labelSubtitulo.setText("Instrucciones");

        jLayeredPane3.setLayer(labelSubtitulo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(jSeparator4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(jLayeredPane3);
        jLayeredPane3.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelSubtitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4)
                .addContainerGap())
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelSubtitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator4))
        );

        editPanel.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        editPanel.setLayer(jLayeredPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane3)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                .addComponent(jLayeredPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLayeredPane4.setLayer(jLayeredPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(labelInfo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jLayeredPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(jLayeredPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane4.setLayer(editPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane4Layout = new javax.swing.GroupLayout(jLayeredPane4);
        jLayeredPane4.setLayout(jLayeredPane4Layout);
        jLayeredPane4Layout.setHorizontalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane6)
                    .addGroup(jLayeredPane4Layout.createSequentialGroup()
                        .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jLayeredPane4Layout.createSequentialGroup()
                                .addComponent(labelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLayeredPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jLayeredPane4Layout.createSequentialGroup()
                                .addComponent(jLayeredPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jLayeredPane4Layout.setVerticalGroup(
            jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane4Layout.createSequentialGroup()
                .addComponent(jLayeredPane6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLayeredPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(editPanel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelInfo)
                    .addComponent(jLayeredPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        jLayeredPane2.setLayer(jLayeredPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLayeredPane4))
        );

        jMenu1.setText("Archivo");

        menuNuevoUsuario.setText("Nuevo usuario");
        menuNuevoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoUsuarioActionPerformed(evt);
            }
        });
        jMenu1.add(menuNuevoUsuario);

        menuNuevoRepo.setText("Nuevo repositorio (git init)");
        menuNuevoRepo.setEnabled(false);
        menuNuevoRepo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoRepoActionPerformed(evt);
            }
        });
        jMenu1.add(menuNuevoRepo);

        menuNuevoArchivo.setText("Nuevo archivo (en workspace)");
        menuNuevoArchivo.setEnabled(false);
        menuNuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(menuNuevoArchivo);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLayeredPane2)
                    .addComponent(jLayeredPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>     
                    
    
    //// BOTONES
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        String archivos = JOptionPane.showInputDialog("Ingrese archivo(s) para agregar");
        
        if(archivos.equals("")){
            Git.add(repositorio, repositorio.getWorkspace().getNombresArchivos());
        }
        else{
            if(archivos.contains(" ") && archivos.split(" ").length>1){
                Git.add(repositorio, Arrays.asList(archivos.split(" ")));
            }else{
                Git.add(repositorio, archivos);
            }
        }        
        updateCount();
        System.out.println("Archivos elegibles agregados a index!");
        
    }                                      

    private void btnCommitActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        String comentario = JOptionPane.showInputDialog("Ingrese comentario para commit");
        Repositorio repo = Git.commit(repositorio, usuario, comentario);
        if(repo==null){
            System.out.println("Nada nuevo para commit");
            return;
        }

        updateCount();
        System.out.println(repositorio.getLocalRepository().getLastCommit().toString());
        System.out.println("Commit realizado!" );
    }                                         

    private void btnPushActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        Git.push(repositorio);
        updateCount();
    }                                       

    private void btnPullActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        Git.pull(repositorio);
        updateCount();
    }                                       

    
    ///// MENUES
    private void menuNuevoRepoActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        nombreRepositorio = JOptionPane.showInputDialog("Ingrese un nombre para el nuevo repositorio");
        repositorio = Git.init(nombreRepositorio, usuario);
        menuNuevoRepo.setEnabled(false);
        menuNuevoArchivo.setEnabled(true);
        labelInfo.setText("Repositorio: " + nombreRepositorio + "   " + usuario.toString());
        System.out.println("Nuevo repositorio creado!");
        System.out.println(repositorio.toString());
        
        statusWorkspace.setEnabled(true);
        statusIndex.setEnabled(true);
        statusLocalRepo.setEnabled(true);
        statusRemoteRepo.setEnabled(true);
        
        updateCount();

    }                                             

    private void menuNuevoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        nombreUsuario = JOptionPane.showInputDialog("Ingrese un nombre para el nuevo usuario");
        mailUsuario = JOptionPane.showInputDialog("Ingrese una direccion de correo electronico para el nuevo usuario");

        usuario = new Usuario(nombreUsuario, mailUsuario);
        menuNuevoRepo.setEnabled(true);
        menuNuevoUsuario.setEnabled(false);
        System.out.println("Nuevo usuario registrado!");
        System.out.println(usuario.toString());
        
    }                                                

    private void menuNuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        nombreNuevoArchivo = JOptionPane.showInputDialog("Ingrese un nombre para el nuevo archivo");
        
        if((archivo = repositorio.getWorkspace().getArchivo(nombreNuevoArchivo))!=null){
            JOptionPane.showMessageDialog(null, "Archivo registrado previamente,\nSe abrir√° edicion archivo: " + nombreNuevoArchivo);
            textAreaPrincipal.setText(archivo.getContenido());
            labelSubtitulo.setText("Edicion - " + nombreNuevoArchivo);
            estadoAreaTexto = EXISTENTEEDIT;
        }else{
            archivo = new Archivo(nombreNuevoArchivo);
            JOptionPane.showMessageDialog(null, "Se abrira la edicion del nuevo archivo: " + nombreNuevoArchivo);
            labelSubtitulo.setText("Nuevo - " + nombreNuevoArchivo);
            textAreaPrincipal.setText("");
            estadoAreaTexto = NUEVOEDIT;
        }

        textAreaPrincipal.setEnabled(true);
        textAreaPrincipal.setEditable(true);
        
        btnGuardar.setEnabled(true);
        btnLimpiar.setEnabled(true);
        btnEliminar.setEnabled(true);
        
    }                                                

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        switch(estadoAreaTexto){
            case NUEVOEDIT:
            textAreaPrincipal.setText("");
            break;
        }
    }                                          

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        switch(estadoAreaTexto){
            case NUEVOEDIT:
                archivo.setContenido(textAreaPrincipal.getText());
                btnGuardar.setEnabled(false);
                btnLimpiar.setEnabled(false);
                btnEliminar.setEnabled(false);
                
                textAreaPrincipal.setText("");
                //textAreaPrincipal.setEnabled(false);
                textAreaPrincipal.setEditable(false);
                labelSubtitulo.setText("Guardado!");
                
                System.out.println("Archivo creado: ");
                repositorio.getWorkspace().addArchivo(archivo);
                System.out.println("Archivo cargado al workspace");
                System.out.println(archivo.toString());
                
                habilitarComandos();
                updateCount();
                
                break;
                
            case EXISTENTEEDIT:
                archivo.actualizaContenido(textAreaPrincipal.getText());
                btnGuardar.setEnabled(false);
                btnLimpiar.setEnabled(false);
                btnEliminar.setEnabled(false);
                
                textAreaPrincipal.setText("");
                //textAreaPrincipal.setEnabled(false);
                textAreaPrincipal.setEditable(false);
                labelSubtitulo.setText("Modificaciones guardadas!");
                
                System.out.println("Archivo modificado: ");
                repositorio.getWorkspace().addArchivo(archivo);
                System.out.println("Archivo cargado modificado en workspace");
                System.out.println(archivo.toString());
                
                habilitarComandos();
                updateCount();
                break;
            
        }
    }                                          

    private void statusWorkspaceActionPerformed(java.awt.event.ActionEvent evt) {                                                
        
        labelSeleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("../img/workspace.png")));
        labelSubtitulo.setText("Detalle WS");
        labelTitleStatus.setText("Workspace");
        String statusWS = Git.status(repositorio, Git.WORKSPACE);
        textAreaPrincipal.setText(statusWS);
        labelStatus.setText(updateCountZona("WORKSPACE"));
        updateCount();

    
    }                                               

    private void statusIndexActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        labelSeleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("../img/index.png")));
        labelSubtitulo.setText("Detalle Index");
        labelTitleStatus.setText("Index");
        String statusIN = Git.status(repositorio, Git.INDEX);
        textAreaPrincipal.setText(statusIN);
        labelStatus.setText(updateCountZona("INDEX"));
        updateCount();
    }                                           

    private void statusLocalRepoActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        labelSeleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("../img/localrepo.png")));
        labelSubtitulo.setText("Detalle LR");
        labelTitleStatus.setText("Local Repository");
        String statusLR = Git.status(repositorio, Git.LOCALREPO);
        textAreaPrincipal.setText(statusLR);
        labelStatus.setText(updateCountZona("LOCALREPO"));
        updateCount();
    }                                               

    private void statusRemoteRepoActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        labelSeleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("../img/remoterepo.png")));
        labelSubtitulo.setText("Detalle RR");
        labelTitleStatus.setText("Remote Repository");
        String statusRR = Git.status(repositorio, Git.REMOTEREPO);
        textAreaPrincipal.setText(statusRR);
        labelStatus.setText(updateCountZona("REMOTEREPO"));
        updateCount();
    }                                                

    private void btnLogActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        // INTERFAZ
        //textAreaPrincipal.setEnabled(false);
        textAreaPrincipal.setEditable(false);
        btnGuardar.setEnabled(false);
        btnLimpiar.setEnabled(false);
        btnEliminar.setEnabled(false);
        
        estadoAreaTexto = GITMONITOREO;
        // GIT
        
        labelSeleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("../img/generico.png")));
        labelSubtitulo.setText("GIT Log");
        labelTitleStatus.setText("GIT");
        labelStatus.setText("");
        textAreaPrincipal.setText(Git.log(repositorio));
        
        System.out.println(Git.log(repositorio));
        updateCount();

    }                                      

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        int opcion = JOptionPane.showConfirmDialog(null, "Realmente desea elminar el archivo " + archivo.getNombre());
        
        if(opcion==0){
            try{
                repositorio.getWorkspace().eliminar(archivo);
                JOptionPane.showMessageDialog(null, "Archivo eliminado correctamente");
                textAreaPrincipal.setText("");
                updateCount();
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "No se pudo eliminar\n" + e.toString());
            }
            
        }
        
    }                                           

    private void updateCount(){
        labelWorkspace.setText(convertToMultiline("Archivos: " + repositorio.getWorkspace().getArchivos().size()));
        
        labelIndex.setText(convertToMultiline("\n\nArchivos: " + repositorio.getIndex().getArchivos().size() + 
                                                "\n-Staged: " + repositorio.getIndex().getStaged().size() +
                                                "\n-Modified: " + repositorio.getIndex().getModified().size() +
                                                "\n-Commited: " + repositorio.getIndex().getCommited().size() ));
        
        labelLocalRepo.setText(convertToMultiline("Archivos: " + repositorio.getLocalRepository().getArchivos().size() + 
                                                  "\nCommits: " + repositorio.getLocalRepository().getCommits().size() ));
        
        labelRemoteRepo.setText(convertToMultiline("Archivos: " + repositorio.getRemoteRepository().getArchivos().size() +
                                                  "\nCommits: " + repositorio.getRemoteRepository().getCommits().size() ));
        
    }
    
    private String updateCountZona(String zona){
        String salida  = "";
        switch(zona){
            case "WORKSPACE":
                salida = convertToMultiline("Archivos: " + repositorio.getWorkspace().getArchivos().size());
                break;
            case "INDEX":
                salida = convertToMultiline("\n\nArchivos: " + repositorio.getIndex().getArchivos().size() + 
                                                "\n-Staged: " + repositorio.getIndex().getStaged().size() +
                                                "\n-Modified: " + repositorio.getIndex().getModified().size() +
                                                "\n-Commited: " + repositorio.getIndex().getCommited().size() );
                break;
            case "LOCALREPO":
                salida = convertToMultiline("Archivos: " + repositorio.getLocalRepository().getArchivos().size() + 
                                                  "\nCommits: " + repositorio.getLocalRepository().getCommits().size() );
                break;
            case "REMOTEREPO":
                salida = convertToMultiline("Archivos: " + repositorio.getRemoteRepository().getArchivos().size() +
                                                  "\nCommits: " + repositorio.getRemoteRepository().getCommits().size());
                break;
            
        }
        return salida;

    }
    
    public void habilitarComandos(){
        btnAdd.setEnabled(true);
        btnCommit.setEnabled(true);
        btnPush.setEnabled(true);
        btnPull.setEnabled(true);
        btnLog.setEnabled(true);
    }
    
    public static String convertToMultiline(String orig){
        return "<html>" + orig.replaceAll("\n", "<br>");
    }


    //// MIOS
    String nombreNuevoArchivo;

    
    /// ELEMENTOS GIT
    boolean salir = false;
    int opcion; //Guardaremos la opcion del usuario
    int navegacion = 1; // etapa del menu
    
    /// NUEVOEDIT: edicion archivos GITMONITOREO: se muestran resultados de comandos git que solo monitorean (log, status).
    final static int DEFAULT = 0, NUEVOEDIT = 1, GITMONITOREO = 2, EXISTENTEEDIT = 3;
    int estadoAreaTexto = DEFAULT;
    
    
        
    Archivo archivo;
    String nombreUsuario = "@desconocido";
    String mailUsuario = "@desconocido";
    String nombreRepositorio = "@desconocido";
    Usuario usuario = new Usuario(nombreUsuario, mailUsuario); //default
    Repositorio repositorio = Git.init(nombreRepositorio, usuario);  // default1
    
    
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCommit;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnLog;
    private javax.swing.JButton btnPull;
    private javax.swing.JButton btnPush;
    private javax.swing.JLayeredPane editPanel;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JLayeredPane jLayeredPane6;
    private javax.swing.JLayeredPane jLayeredPane7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel labelIndex;
    private javax.swing.JLabel labelInfo;
    private javax.swing.JLabel labelLocalRepo;
    private javax.swing.JLabel labelRemoteRepo;
    private javax.swing.JLabel labelSeleccion;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelSubtitulo;
    private javax.swing.JLabel labelTitleStatus;
    private javax.swing.JLabel labelWorkspace;
    private javax.swing.JMenuItem menuNuevoArchivo;
    private javax.swing.JMenuItem menuNuevoRepo;
    private javax.swing.JMenuItem menuNuevoUsuario;
    private javax.swing.JButton statusIndex;
    private javax.swing.JButton statusLocalRepo;
    private javax.swing.JButton statusRemoteRepo;
    private javax.swing.JButton statusWorkspace;
    private javax.swing.JTextArea textAreaPrincipal;
    // End of variables declaration                   

    
   
}
